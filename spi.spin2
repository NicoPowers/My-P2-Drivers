CON

_clkfreq = 150_000_000
divisor = 1
desired_frequency = 100_000
spi_clk = 20
spi_mosi = 21
spi_cs = 22


VAR

long stack[50]

PUB main()

SPI_INIT(20, 23, 22, 0, 100_000, 8)

repeat

PUB SPI_INIT(clk_pin, mosi_pin, miso_pin, spi_mode, frequency, data_length) : status | clk_m, clk_x, mosi_m, mosi_x, miso_m, miso_x, miso_clk_displacement, mosi_clk_displacement, displacement

debug(udec(clk_pin), udec(mosi_pin), udec(miso_pin))

' verify the data_length is between 1 and 32, inclusive
if data_length < 1 || data_length > 32
  debug("ERROR: incorrect data length size")
  status := -1
  return

' verify that the mosi and miso pins are not too far away from the clk and check for pin uniqueness
if abs(mosi_pin - clk_pin) > 3
  debug("ERROR: mosi pin too far away from clk pin")
  status := -1
  return
elseif (mosi_pin == clk_pin)
  debug("ERROR: mosi pin cannot be the same as clk pin")
  status := -1
  return

if abs(miso_pin - clk_pin) > 3
  debug("ERROR: miso pin too far away from clk pin")
  status := -1
  return
elseif (miso_pin == clk_pin)
  debug("ERROR: miso pin cannot be the same as clk pin")
  status := -1
  return

if (miso_pin == mosi_pin)
  debug("ERROR: miso pin cannot be the same as miso pin")
  status := -1
  return


' determine P_MINUS_B value for miso and mosi for the clock
displacement := clk_pin - mosi_pin
mosi_m := $0000_0000 | ((displacement & 7) << 24)
displacement := clk_pin - miso_pin
miso_m := $0000_0000 | ((displacement & 7) << 24)


case spi_mode
  ' CPOL = 0 & CPHA = 0
  0:
    ' setup SPI MOSI to idle on LOW
    clk_m := P_OE | P_TRANSITION
    clk_x := 2 #> (_clkfreq / frequency / 2) <# $FFFF
    ' setup SPI MOSI to shift out data on falling edge
    mosi_m := P_INVERT_B | P_OE | P_SYNC_TX
    mosi_x := $2 << 5 | (data_length-1)
    ' setup SPI MISO to sample on rising edge
    miso_m := P_SYNC_RX
    miso_x := $2 << 5 | (data_length-1)

' setup SPI MOSI to idle on LOW
pinstart(clk_pin, P_OE | P_TRANSITION, 2 #> (_clkfreq / frequency / 2) <# $FFFF, 0)
' setup SPI MOSI to shift out data on falling edge
pinstart(mosi_pin, P_INVERT_B | P_MINUS1_B | P_OE | P_SYNC_TX, $2 << 5 | (data_length-1), 0)
' setup SPI MISO to sample on rising edge
pinstart(miso_pin, P_INVERT_B | P_MINUS1_B | P_OE | P_SYNC_TX, $2 << 5 | (data_length-1), 0)


repeat

PUB waitForIN(pin)

org

WAIT_IN
testp pin wc                    ' get state of IN bit for smart pin, store in C
if_c jmp #IN_SET                ' if C is set (IN = 1), branch to IN_SET
jmp #WAIT_IN                    ' if C is NOT set, go back to WAIT_IN to continue polling

IN_SET
akpin pin                       ' ack IN to clear it
debug("in set")

end


